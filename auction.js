import config from './config.js';
import { Telegraf, Markup } from 'telegraf';

const bot = new Telegraf(config.bot.token);
const callbackButton = Markup.button.callback;
const urlButton = Markup.button.url;

import { User, Lot } from './models.js';

const mainKB = Markup.keyboard([
    ['ü•á –ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã'],
    ['‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞'],
    ['‚ùì –ü–æ–º–æ—â—å'],
]).resize();

const adminKB = Markup.keyboard([
    ['‚ûï –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç'],
    ['üü© –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'üü• –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
    ['‚ùå –°–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É —É –ª–æ—Ç–∞'],
    ['üóë –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç'],
    ['‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏']
]).resize();

// const shareLot = id => ;

const cancelKB = Markup.keyboard([
    ['‚óÄÔ∏è –û—Ç–º–µ–Ω–∞']
]).resize();

const lotKB = (lotId) => Markup.inlineKeyboard([
    [callbackButton('+30‚ÇΩ', `lot_${lotId}_bet_30`), callbackButton('+50‚ÇΩ', `lot_${lotId}_bet_50`), callbackButton('+100‚ÇΩ', `lot_${lotId}_bet_100`)],
    [callbackButton('+300‚ÇΩ', `lot_${lotId}_bet_300`), callbackButton('+500‚ÇΩ', `lot_${lotId}_bet_500`) ],
    [callbackButton('üïî', `lot_${lotId}_time`), callbackButton('‚ÑπÔ∏è', `lot_${lotId}_info`)]
]);

bot.use(async (ctx, next) => {
    try {
        let msg = ctx.message, data;
        if (!msg && ctx.callbackQuery) {
            msg = ctx.callbackQuery.message;
            data = ctx.callbackQuery.data;
        }
        if (!msg || !msg.chat || msg.chat.type != 'private') {
            if (data) {
                let lot = await Lot.findOne({id: Number(data.split('_')[1])});

                if (lot.status == 'completed') {
                    return await ctx.answerCbQuery('–õ–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!');
                }
    
                if (lot.status == 'wait') {
                    return await ctx.answerCbQuery('–õ–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
                }

                if (data.split('_')[2] == 'time') {
                    let secs = Math.floor((lot.endDate - Date.now()) / 1000);
                    let hours = Math.floor(secs / (60 * 60));
                    let mins = Math.floor( (secs % 3600) / 60);
                    secs = secs % 60;
                    await ctx.answerCbQuery(`–û—Å—Ç–∞–ª–æ—Å—å ${hours}—á. ${mins}–º. ${secs}—Å.`);
                } else if (data.split('_')[2] == 'info') {
                    await ctx.answerCbQuery('‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ª–æ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n‚ÑπÔ∏è –í—ã–∫—É–ø –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.\n‚ÑπÔ∏è –ù–µ–≤—ã–∫—É–ø –ª–æ—Ç–∞=–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.', {show_alert: true});
                }
            }
            return;
        }
        
        let u = await User.findOne({id: msg.chat.id});
        if (!u) {
            u = new User({
                id: msg.chat.id,
                ban: false,
                state: 'main',
                auctions: [],
                cntWonAuctions: 0,
                cntBets: 0
            });
            await u.save();
        }
        
        if (u.ban) {
            return await ctx.replyWithHTML(`–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!`);
        }

        ctx.u = u;
        return next();
    }
    catch {
        console.log('–û—à–∏–±–∫–∞ –≤ bot.use');
        console.log(e);
        return await ctx.replyWithHTML(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start`);
    }
})

bot.on(`photo`, async (ctx) => {
    try {
        let uid = ctx.message.chat.id,
            photo = ctx.message.photo,
            answer = async (text, keyboard) => ctx.replyWithHTML(text, keyboard),
            u = ctx.u;
        

        if (u.state.startsWith('admin')) {

            let parts = u.state.split('_');
    
            if (parts[1] == 'photo') {
                
                let lotId = Number(parts[2]), disc = parts[3], seller = parts[4], start = Number(parts[5]), startDate = Number(parts[6]) - 3 * 60 * 60 * 1000, endDate = Number(parts[7]) - 3 * 60 * 60 * 1000;
                console.log({
                    id: lotId,
                    status: 'wait',
                    text: disc,
                    seller,
                    top: [],
                    start,
                    startDate,
                    endDate,
                    photoId: photo[0].file_id,
                    msgId: null
                });
                await Lot.create({
                    id: lotId,
                    status: 'wait',
                    text: disc,
                    seller,
                    top: [],
                    start,
                    startDate,
                    endDate,
                    photoId: photo[0].file_id,
                    msgId: null
                });
                await u.updateOne({state: `admin`});
                return await answer(`–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`, adminKB);
            }

    
        }


    }
    catch (e) {
        console.log('–û—à–∏–±–∫–∞ –≤ bot.on("photo")');
        console.log(e);
        return await ctx.replyWithHTML(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start`);
    }
});

bot.on(`text`, async (ctx) => {
    try {
        let uid = ctx.message.chat.id,
            text = ctx.message.text,
            answer = async (text, keyboard) => ctx.replyWithHTML(text, keyboard),
            answerWithPhoto = async (photo, caption, keyboard) => ctx.replyWithPhoto(photo, { caption, ...keyboard }),
            u = ctx.u;

            
        console.log(`${uid} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: ${text}`);

        if (text == '/start') {
            await u.updateOne({state: 'main'});
            return await answer(`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!`, mainKB);
        }

        if (text == '/admin' && config.admins.includes(uid)) {
            await u.updateOne({state: 'admin'});
            return await answer(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –∞–¥–º–∏–Ω–∫–µ!`, adminKB);
        }

        if (u.state.startsWith('admin')) {

            let parts = u.state.split('_');
            
            if (text == '‚óÄÔ∏è –û—Ç–º–µ–Ω–∞') {
                await u.updateOne({state: 'admin'});
                return await answer(`–í—ã –≤ –∞–¥–º–∏–Ω–∫–µ!`, adminKB);
            }
    
            if (parts[1] == 'unban') {
                await u.updateOne({state: 'admin'});
                if (!Number.isInteger(Number(text)))
                    return await answer(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`, adminKB); 
                let su = await User.findOne({id: Number(text)});
                if (su) {
                    await su.updateOne({ban: false});
                    return await answer(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω!`, adminKB);
                } else
                    return await answer(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`, adminKB);       
            }

            if (parts[1] == 'ban') {
                await u.updateOne({state: 'admin'});
                if (!Number.isInteger(Number(text)))
                    return await answer(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`, adminKB); 
                let su = await User.findOne({id: Number(text)});
                if (su) {
                    await su.updateOne({ban: true});
                    return await answer(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!`, adminKB);
                } else
                    return await answer(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`, adminKB);  
            }

            if (parts[1] == 'deleteBet') {
                await u.updateOne({state: 'admin'});
                if (!Number.isInteger(Number(text)))
                    return await answer(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`, adminKB); 
                let slot = await Lot.findOne({id: Number(text)});
                if (slot && slot.top.length > 0) {
                    let newTop = slot.top;
                    newTop.shift();
                    await slot.updateOne({top: newTop});
                    return await answer(`–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω–∞!`, adminKB);
                } else
                    return await answer(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`, adminKB);  
            }
            
            if (parts[1] == 'deleteLot') {
                await u.updateOne({state: 'admin'});
                if (!Number.isInteger(Number(text)))
                    return await answer(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`, adminKB); 
                let slot = await Lot.findOne({id: Number(text)});
                if (slot) {
                    await slot.deleteOne({});
                    return await answer(`–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`, adminKB);
                } else
                    return await answer(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!`, adminKB);  
            }

            if (parts[1] == 'lotId') {

                let lotId = Number(text);
                if (Number.isInteger(lotId)) {
                    let uniqueLotCheck = await Lot.findOne({id: lotId});
                    if (!uniqueLotCheck) {
                        await u.updateOne({state: `admin_text_${lotId}`});
                        return answer(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ª–æ—Ç–∞!`, cancelKB);
                    } else return answer(`–¢–∞–∫–æ–π id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ id –ª–æ—Ç–∞!`, cancelKB);
                } else return answer(`–í–≤–µ–¥–∏—Ç–µ id –ª–æ—Ç–∞!`, cancelKB);

            } else if (parts[1] == 'text') {

                await u.updateOne({state: `admin_seller_${parts[2]}_${text}`});
                return answer(`–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ª–æ—Ç–∞!`, cancelKB);

            } else if (parts[1] == 'seller') {

                await u.updateOne({state: `admin_start_${parts[2]}_${parts[3]}_${text}`});
                return answer(`–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –ª–æ—Ç–∞!`, cancelKB);

            } else if (parts[1] == 'start') {

                let start = Number(text);
                if (Number.isInteger(start)) {
                    await u.updateOne({state: `admin_startDate_${parts[2]}_${parts[3]}_${parts[4]}_${start}`});
                    return answer(`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ª–æ—Ç–∞!`, cancelKB);
                } else return answer(`–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –ª–æ—Ç–∞!`, cancelKB);

            } else if (parts[1] == 'startDate') {
                let startDate;
                try { startDate = Number(Date.UTC(text.split(' ')[0].split('.')[2], text.split(' ')[0].split('.')[1] - 1, text.split(' ')[0].split('.')[0], text.split(' ')[1].split(':')[0], text.split(' ')[1].split(':')[1], text.split(' ')[1].split(':')[2])); }
                catch { return answer(`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ª–æ—Ç–∞!`, cancelKB); }
                
                if (Number.isInteger(startDate)) {
                    await u.updateOne({state: `admin_endDate_${parts[2]}_${parts[3]}_${parts[4]}_${parts[5]}_${startDate}`});
                    return answer(`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ—Ç–∞!`, cancelKB);
                } else return answer(`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ª–æ—Ç–∞!`, cancelKB);
                
            } else if (parts[1] == 'endDate') {
                
                let endDate;
                try { endDate = Number(Date.UTC(text.split(' ')[0].split('.')[2], text.split(' ')[0].split('.')[1] - 1, text.split(' ')[0].split('.')[0], text.split(' ')[1].split(':')[0], text.split(' ')[1].split(':')[1], text.split(' ')[1].split(':')[2])); }
                catch { return answer(`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ—Ç–∞!`, cancelKB); }

                if (Number.isInteger(endDate)) {
                    await u.updateOne({state: `admin_photo_${parts[2]}_${parts[3]}_${parts[4]}_${parts[5]}_${parts[6]}_${endDate}`});
                    return answer(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª–æ—Ç–∞!`, cancelKB);
                } else return answer(`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–æ—Ç–∞!`, cancelKB);
                
            } else if (parts[1] == 'photo') return answer(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ª–æ—Ç–∞!`, cancelKB);
    
            if (text == '‚ûï –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç') {
                await u.updateOne({state: 'admin_lotId'});
                return answer(`–í–≤–µ–¥–∏—Ç–µ id –ª–æ—Ç–∞!`, cancelKB);
            }

            if (text == 'üü© –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
                await u.updateOne({state: 'admin_unban'});
                return answer(`–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å!`, cancelKB);
            }

            if (text == 'üü• –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è') {
                await u.updateOne({state: 'admin_ban'});
                return answer(`–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å!`, cancelKB);
            }

            if (text == '‚ùå –°–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É —É –ª–æ—Ç–∞') {
                await u.updateOne({state: 'admin_deleteBet'});
                return answer(`–í–≤–µ–¥–∏—Ç–µ id –ª–æ—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–≤–∫—É!`, cancelKB);
            }
            
            if (text == 'üóë –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç') {
                await u.updateOne({state: 'admin_deleteLot'});
                return answer(`–í–≤–µ–¥–∏—Ç–µ id –ª–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å!`, cancelKB);
            }

            if (text == '‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏') {
                await u.updateOne({state: 'main'});
                return answer(`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!`, mainKB);
            }
    
        }

        //

        if (text.split(' ')[0] == '/start' && Number.isInteger(Number(text.split(' ')[1]))) {
            let lot = await Lot.findOne({id: Number(text.split(' ')[1])});

            if (lot) {
                if (lot.status == 'completed')
                    return answer('–û—à–∏–±–∫–∞! –õ–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!');

                if (lot.status == 'wait')
                    return answer('–û—à–∏–±–∫–∞! –õ–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');

                let KB = lotKB(lot.id);
                if (lot.top.length == 0)
                    KB.reply_markup.inline_keyboard.unshift([callbackButton('–°—Ç–∞—Ä—Ç', `lot_${lot.id}_bet_start`)]);

                return answerWithPhoto(lot.photoId, `${lot.text}
–ü—Ä–æ–¥–∞–≤–µ—Ü: ${lot.seller}
${ lot.top.length == 0 ? `‚ÜòÔ∏è –°—Ç–∞—Ä—Ç: ${lot.start} —Ä—É–±–ª–µ–π` : `1 –º–µ—Å—Ç–æ: ${ lot.top.length > 0 ? (lot.top[0].user.username ? lot.top[0].user.username.slice(0, 4) : String(lot.top[0].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[0].bet + '‚ÇΩ' : '-----' }
2 –º–µ—Å—Ç–æ: ${ lot.top.length > 1 ? (lot.top[1].user.username ? lot.top[1].user.username.slice(0, 4) : String(lot.top[1].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[1].bet + '‚ÇΩ' : '-----' }
3 –º–µ—Å—Ç–æ: ${ lot.top.length > 2 ? (lot.top[2].user.username ? lot.top[2].user.username.slice(0, 4) : String(lot.top[2].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[2].bet + '‚ÇΩ' : '-----' }`}`, KB);
            } else {
                return answer('–û—à–∏–±–∫–∞! –õ–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            }

        }

        if (Number.isInteger(Number(text.split('/')[1]))) {
            let lot = await Lot.findOne({id: Number(text.split('/')[1]) });
            console.log(lot);
            if (lot) {
                if (lot.status == 'completed')
                    return answer('–û—à–∏–±–∫–∞! –õ–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!');

                if (lot.status == 'wait')
                    return answer('–û—à–∏–±–∫–∞! –õ–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');

                let KB = lotKB(lot.id);
                if (lot.top.length == 0)
                    KB.reply_markup.inline_keyboard.unshift([callbackButton('–°—Ç–∞—Ä—Ç', `lot_${lot.id}_bet_start`)]);
                
                return answerWithPhoto(lot.photoId, `${lot.text}
–ü—Ä–æ–¥–∞–≤–µ—Ü: ${lot.seller}
${ lot.top.length == 0 ? `‚ÜòÔ∏è –°—Ç–∞—Ä—Ç: ${lot.start} —Ä—É–±–ª–µ–π` : `1 –º–µ—Å—Ç–æ: ${ lot.top.length > 0 ? (lot.top[0].user.username ? lot.top[0].user.username.slice(0, 4) : String(lot.top[0].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[0].bet + '‚ÇΩ' : '-----' }
2 –º–µ—Å—Ç–æ: ${ lot.top.length > 1 ? (lot.top[1].user.username ? lot.top[1].user.username.slice(0, 4) : String(lot.top[1].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[1].bet + '‚ÇΩ' : '-----' }
3 –º–µ—Å—Ç–æ: ${ lot.top.length > 2 ? (lot.top[2].user.username ? lot.top[2].user.username.slice(0, 4) : String(lot.top[2].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[2].bet + '‚ÇΩ' : '-----' }`}`, KB);
            } else {
                return answer('–û—à–∏–±–∫–∞! –õ–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            }
        }


        if (text == 'ü•á –ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã') {
            return answer(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å—Ç–∞–≤–æ–∫: ${u.cntBets}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: ${u.auctions.length}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤: ${u.cntWonAuctions}`, mainKB);
        }

        if (text == '‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞') {
            return answer(`–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤,–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤—ã–π—Ç–∏ –Ω–∞ —Å–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º 
—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Å—É—Ç–æ–∫‚ÄºÔ∏è|\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–±—è–∑–∞–Ω –≤—ã–∫—É–ø–∏—Ç—å –ª–æ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –¢–†–Å–• –¥–Ω–µ–π,–ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞üî•
–ù–ï –í–´–ö–£–ü –õ–û–¢–ê - –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ô –ë–ê–ù –í–û –í–°–ï–• –ù–£–ú–ò–ó–ú–ê–¢–ò–ß–ï–°–ö–ò–• –°–û–û–ë–©–ï–°–¢–í–ê–• –ò –ê–£–ö–¶–ò–û–ù–ê–•ü§¨\n–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ‚è∞\n–ê–Ω—Ç–∏—Å–Ω–∞–π–ø–µ—Ä - –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–Ω–∞—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞,–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç
–ê—É–∫—Ü–∏–æ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç –≤–ø–µ—Ä—ë–¥ ‚ÄºÔ∏è\n\n–†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—ã,–∏—Ö –û—Ç–∑—ã–≤—ã —Å—É–º–∞—Ä–Ω–æ –¥–æ—Å—Ç–∏–≥–∞—é—Ç 10000+ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö.\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –§–æ—Ç–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø—Ä–æ–¥–∞–≤—Ü–∞.\n–°–ª—É—á–∞–π–Ω–æ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É?ü§î\n–ù–∞–ø–∏—à–∏ –ø—Ä–æ–¥–∞–≤—Ü—É‚ÄºÔ∏è


–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á—Ç–æ–π,—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–¥ —Ñ–æ—Ç–æ.
–õ–æ—Ç—ã –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å ,—ç–∫–æ–Ω–æ–º—è –ø—Ä–∏ —ç—Ç–æ–º –Ω–∞ –ø–æ—á—Ç–µ.
–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —Ç—Ä—ë—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã‚ÄºÔ∏è`, mainKB);
        }

        if (text == '‚ùì –ü–æ–º–æ—â—å') {
            return answer(`–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã @hollBmniM
–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: @glebshapa`, mainKB);
        }
        
    }
    catch (e) {
        console.log('–û—à–∏–±–∫–∞ –≤ bot.on("text")');
        console.log(e);
        return await ctx.replyWithHTML(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start`);
    }
});

console.log(Date.now());

bot.on('callback_query', async (ctx) => {
    try {
        let uid = ctx.callbackQuery.message.chat.id,
            answer = async (text, keyboard) => ctx.editMessageText(text, { parse_mode, ...keyboard }),
            answerWithPhoto = async (text, keyboard) => ctx.editMessageCaption(text, { parse_mode, ...keyboard }),
            sendMessageWithPhoto = async (photo, caption, keyboard) => ctx.replyWithPhoto(photo, { caption, ...keyboard }),
            d = ctx.callbackQuery.data,
            u = ctx.u;
        
        console.log(`${uid} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–±—ç–∫: ${d}`);

        if (d.startsWith('lot')) {
            let lot = await Lot.findOne({id: Number(d.split('_')[1])});

            if (lot.status == 'completed') {
                await ctx.answerCbQuery('–û—à–∏–±–∫–∞! –õ–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!');
                return await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
            }

            if (lot.status == 'wait') {
                await ctx.answerCbQuery('–û—à–∏–±–∫–∞! –õ–æ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
                return await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
            }

            if (d.split('_')[2] == 'open') {
                return await sendMessageWithPhoto(lot.photoId,`${lot.text}
–ü—Ä–æ–¥–∞–≤–µ—Ü: ${lot.seller}
${ lot.top.length == 0 ? `‚ÜòÔ∏è –°—Ç–∞—Ä—Ç: ${lot.start} —Ä—É–±–ª–µ–π` : `1 –º–µ—Å—Ç–æ: ${ lot.top.length > 0 ? (lot.top[0].user.username ? lot.top[0].user.username.slice(0, 4) : String(lot.top[0].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[0].bet + '‚ÇΩ' : '-----' }
2 –º–µ—Å—Ç–æ: ${ lot.top.length > 1 ? (lot.top[1].user.username ? lot.top[1].user.username.slice(0, 4) : String(lot.top[1].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[1].bet + '‚ÇΩ' : '-----' }
3 –º–µ—Å—Ç–æ: ${ lot.top.length > 2 ? (lot.top[2].user.username ? lot.top[2].user.username.slice(0, 4) : String(lot.top[2].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[2].bet + '‚ÇΩ' : '-----' }`}`, lotKB(lot.id));
            }

            

            let newTop = lot.top;
            if (d.split('_')[2] == 'bet') {

                let bet = Number(d.split('_')[3]);

                if (d.split('_')[3] == 'start') {
                    bet = 0;
                    if (newTop.length != 0) {
                        await ctx.answerCbQuery(`–û—à–∏–±–∫–∞! –õ–æ—Ç —É–∂–µ –Ω–∞—á–∞–ª—Å—è!`);
                        return await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
                    }
                }

                let auctions = u.auctions;
                auctions.push(lot.id);
                await u.updateOne({cntBets: u.cntBets + 1, auctions: [...(new Set(auctions))] });
                
                if (newTop.length == 0)
                    newTop.push({user: ctx.callbackQuery.message.chat, bet: lot.start + bet});
                else
                    newTop.unshift({user: ctx.callbackQuery.message.chat, bet: newTop[0].bet + bet});
    
                await lot.updateOne({top: newTop});

                await bot.telegram.sendMessage(config.adminNotifications, `–ê—É–∫—Ü–∏–æ–Ω <b>‚Ññ${lot.id}</b>: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="tg://user?id=${lot.top[0].user.id}">${lot.top[0].user.id}</a> —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –≤ <b>${lot.top[0].bet}‚ÇΩ</b>`, {parse_mode});
                
                if ( (lot.endDate - Date.now()) < 10 * 60 * 1000) {
                    await lot.updateOne({endDate: Date.now() + 10 * 60 * 1000});
                }

                try {
                if (lot.top.length > 1)
                    await bot.telegram.sendMessage(lot.top[1].user.id, `–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ –ª–æ—Ç–µ ‚Ññ${lot.id} –ø–µ—Ä–µ–±–∏—Ç–∞!`, {parse_mode, reply_markup: {inline_keyboard: [
                                [{text: 'üìñ –û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç', callback_data: `lot_${lot.id}_open`}],
                                    ]}});
                }
                catch (e) { console.log(e); }

                try {
                
                await bot.telegram.editMessageCaption(config.newsNotifications, lot.msgId, '', `${lot.text}
–ü—Ä–æ–¥–∞–≤–µ—Ü: ${lot.seller}
${ lot.top.length == 0 ? `‚ÜòÔ∏è –°—Ç–∞—Ä—Ç: ${lot.start} —Ä—É–±–ª–µ–π` : `1 –º–µ—Å—Ç–æ: ${ lot.top.length > 0 ? (lot.top[0].user.username ? lot.top[0].user.username.slice(0, 4) : String(lot.top[0].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[0].bet + '‚ÇΩ' : '-----' }
2 –º–µ—Å—Ç–æ: ${ lot.top.length > 1 ? (lot.top[1].user.username ? lot.top[1].user.username.slice(0, 4) : String(lot.top[1].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[1].bet + '‚ÇΩ' : '-----' }
3 –º–µ—Å—Ç–æ: ${ lot.top.length > 2 ? (lot.top[2].user.username ? lot.top[2].user.username.slice(0, 4) : String(lot.top[2].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[2].bet + '‚ÇΩ' : '-----' }`}`, {parse_mode, reply_markup: {inline_keyboard: [
                                [{text: 'üìñ –û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç', url: `https://t.me/${config.bot.username}?start=${lot.id}`}],
                                [{text: 'üïî', callback_data: `lot_${lot.id}_time`}, {text: '‚ÑπÔ∏è', callback_data: `lot_${lot.id}_info`}]
                               	]}});
                }
                catch (e) { console.log(e); }
            
            } else if (d.split('_')[2] == 'time') {
                let secs = Math.floor((lot.endDate - Date.now()) / 1000);
                let hours = Math.floor(secs / (60 * 60));
                let mins = Math.floor( (secs % 3600) / 60);
                secs = secs % 60;
                await ctx.answerCbQuery(`–û—Å—Ç–∞–ª–æ—Å—å ${hours}—á. ${mins}–º. ${secs}—Å.`);
            } else if (d.split('_')[2] == 'info') {
                await ctx.answerCbQuery('‚ÑπÔ∏è –ß—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ª–æ—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n‚ÑπÔ∏è –í—ã–∫—É–ø –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞.\n‚ÑπÔ∏è –ù–µ–≤—ã–∫—É–ø –ª–æ—Ç–∞=–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ –Ω–∞—à–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ.', {show_alert: true});
            }

            let KB = lotKB(lot.id);
            if (lot.top.length == 0)
                KB.reply_markup.inline_keyboard.unshift([callbackButton('–°—Ç–∞—Ä—Ç', `lot_${lot.id}_bet_start`)]);


            try {
                return await answerWithPhoto(`${lot.text}
–ü—Ä–æ–¥–∞–≤–µ—Ü: ${lot.seller}
${ lot.top.length == 0 ? `‚ÜòÔ∏è –°—Ç–∞—Ä—Ç: ${lot.start} —Ä—É–±–ª–µ–π` : `1 –º–µ—Å—Ç–æ: ${ lot.top.length > 0 ? (lot.top[0].user.username ? lot.top[0].user.username.slice(0, 4) : String(lot.top[0].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[0].bet + '‚ÇΩ' : '-----' }
2 –º–µ—Å—Ç–æ: ${ lot.top.length > 1 ? (lot.top[1].user.username ? lot.top[1].user.username.slice(0, 4) : String(lot.top[1].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[1].bet + '‚ÇΩ' : '-----' }
3 –º–µ—Å—Ç–æ: ${ lot.top.length > 2 ? (lot.top[2].user.username ? lot.top[2].user.username.slice(0, 4) : String(lot.top[2].user.id).slice(0, 4)) + '****' + ' - ' + lot.top[2].bet + '‚ÇΩ' : '-----' }`}`, KB);
            }
            catch (e) {
                return;
            }

        }
        

    }
    catch (e) {
        console.log('–û—à–∏–±–∫–∞ –≤ bot.on("callback_query")');
        console.log(e);
        return await ctx.replyWithHTML(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü—Ä–æ–ø–∏—à–∏—Ç–µ /start`);
    }
});

bot.catch(e => console.log(e));

bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

console.log('bot started');
const parse_mode = "html";

function word(words, number) {
    return words[(number % 100 > 4 && number % 100 < 20) ? 2 : [2, 0, 1, 1, 1, 2][(number % 10 < 5) ? number % 10 : 5]];
}

async function updateAll() {
    // console.log('updating...');
    
    let openedLots = await Lot.find({startDate: {$lt: Date.now()}, status: 'wait'});

    openedLots.map(async e => {
        await e.updateOne({status: 'open'});
        console.log(`${e.id} opened!`);

        let msgWithLot = await bot.telegram.sendPhoto(config.newsNotifications, e.photoId, {parse_mode, reply_markup: 
            {inline_keyboard: [
                [{text: 'üìñ –û—Ç–∫—Ä—ã—Ç—å –ª–æ—Ç', url: `https://t.me/${config.bot.username}?start=${e.id}`}],
                [{text: 'üïî', callback_data: `lot_${e.id}_time`}, {text: '‚ÑπÔ∏è', callback_data: `lot_${e.id}_info`}]
            ]}, caption: `${e.text}
–ü—Ä–æ–¥–∞–≤–µ—Ü: ${e.seller}
${ e.top.length == 0 ? `‚ÜòÔ∏è –°—Ç–∞—Ä—Ç: ${e.start} —Ä—É–±–ª–µ–π` : `1 –º–µ—Å—Ç–æ: ${ e.top.length > 0 ? (e.top[0].user.username ? e.top[0].user.username.slice(0, 4) : String(e.top[0].user.id).slice(0, 4)) + '****' + ' - ' + e.top[0].bet + '‚ÇΩ' : '-----' }
2 –º–µ—Å—Ç–æ: ${ e.top.length > 1 ? (e.top[1].user.username ? e.top[1].user.username.slice(0, 4) : String(e.top[1].user.id).slice(0, 4)) + '****' + ' - ' + e.top[1].bet + '‚ÇΩ' : '-----' }
3 –º–µ—Å—Ç–æ: ${ e.top.length > 2 ? (e.top[2].user.username ? e.top[2].user.username.slice(0, 4) : String(e.top[2].user.id).slice(0, 4)) + '****' + ' - ' + e.top[2].bet + '‚ÇΩ' : '-----' }`}`});
        await e.updateOne({msgId: msgWithLot.message_id});
        
        await bot.telegram.sendMessage(config.adminNotifications, `üèÅ –ê—É–∫—Ü–∏–æ–Ω <b>‚Ññ${e.id}</b> –Ω–∞—á–∞–ª—Å—è`, {parse_mode});
    }); 
    
    let closedLots = await Lot.find({endDate: {$lt: Date.now()}, status: 'open'});
    
    closedLots.map(async e => {
        await e.updateOne({status: 'completed'});
        console.log(`${e.id} closed!`);
        
        if (e.top.length > 0) {
            await User.updateOne({id: e.top[0].user.id}, {$inc: {cntWonAuctions: 1}});
            await bot.telegram.sendMessage(e.top[0].user.id, `üèÅ –ê—É–∫—Ü–∏–æ–Ω <b>‚Ññ${e.id}</b> –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
–í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å–æ —Å—Ç–∞–≤–∫–æ–π –≤ <b>${e.top[0].bet}‚ÇΩ</b>
–°–≤—è–∂–∏—Ç–µ—Å—å —Å <b>${e.seller}</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–∞`, {parse_mode});
        }

        await bot.telegram.sendMessage(config.adminNotifications, `üèÅüèÅüèÅ –ê—É–∫—Ü–∏–æ–Ω <b>‚Ññ${e.id}</b> –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
${e.top.length > 0 ? `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å <a href="tg://user?id=${e.top[0].user.id}">${e.top[0].user.id}</a> —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É –≤ <b>${e.top[0].bet}‚ÇΩ</b>` : `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω`}`, {parse_mode});
    }); 
}

if (config.updateInfo) {
    setInterval(updateAll, 10 * 1000);
    updateAll();
}

setTimeout(() => {process.exit(0)}, 1000 * 60 * 20);
